{"version":3,"sources":["Header/Header.js","StateProvider.js","Input/Input.js","Outputs/Outputs.js","Controls/Controls.js","List/List.js","firebase.js","App.js","reportWebVitals.js","reducer.js","index.js"],"names":["Header","StateContext","createContext","StateProvider","reducer","initialState","children","Provider","value","useReducer","useStateValue","useContext","Input","label","options","inputStyle","display","background","border","color","state","dispatch","className","Autocomplete","freeSolo","sort","onChange","event","clone","push","type","data","renderInput","params","TextField","margin","variant","style","Outputs","map","item","Controls","Tooltip","title","placement","onClick","diagnoses","procedures","diagnosis_indices","findIndex","element","procedure_indices","diag_str","join","pro_str","url","axios","get","then","response","length","drug_names","split","parseInt","id","size","List","handleRemove","idx","splice","IconButton","fontSize","dbRef","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","database","ref","App","useState","setData","useEffect","once","snap","val","name","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","actionTypes","action","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iPAWeA,MARf,WACI,OACI,8BACI,qE,kCCFCC,EAAeC,0BAEfC,EAAgB,SAAC,GAAD,IAAEC,EAAF,EAAEA,QAASC,EAAX,EAAWA,aAAcC,EAAzB,EAAyBA,SAAzB,OACzB,cAACL,EAAaM,SAAd,CAAuBC,MAAOC,qBAAWL,EAASC,GAAlD,SACKC,KAIII,EAAgB,kBAAMC,qBAAWV,ICP/B,SAASW,EAAT,GAAkC,IAAlBC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,QAC5BC,EAAa,CACfC,QAAS,QACTC,WAAY,qBACZC,OAAQ,IACRC,MAAO,sBAGX,EAA0BT,IAA1B,mBAAOU,EAAP,KAAcC,EAAd,KACA,OACI,qBAAKC,UAAWT,EAAhB,SAEI,cAACU,EAAA,EAAD,CACIC,UAAQ,EACRV,QAASA,EAAQW,OACjBC,SAAU,SAACC,EAAOnB,GAEd,GAAc,OAAVA,EAAgB,CAChB,IAAIoB,EAAK,YAAOR,EAAMP,IACtBe,EAAMC,KAAKrB,GACXa,EAAS,CACLS,KAAMjB,EACNkB,KAAMH,MAKlBI,YAAa,SAACC,GAAD,OACb,cAACC,EAAA,EAAD,2BAAeD,GAAf,IACIE,OAAO,SACPC,QAAQ,WACRC,MAAOtB,U,OCjBZuB,MAdf,WACI,IAAMlB,EAAQV,IAAgB,GAE9B,OACI,qBAAKY,UAAU,UAAf,SACKF,EAAK,KAASmB,KAAI,SAAAC,GAAI,OACnB,6BACI,gDAASA,a,mDC0EdC,MA9Ef,YAA2B,IAARV,EAAO,EAAPA,KACf,EAA0BrB,IAA1B,mBAAOU,EAAP,KAAcC,EAAd,KA6DA,OACI,sBAAKC,UAAY,iBAAjB,UACI,cAACoB,EAAA,EAAD,CAASC,MAAM,YAAYC,UAAU,MAArC,SACI,8BACI,cAAC,IAAD,CAAQC,QA/DI,WACxBxB,EAAS,CACLS,KAAM,YAEV,IAAMgB,EAAY1B,EAAK,UACjB2B,EAAa3B,EAAK,UAElB4B,EAAoBF,EAAUP,KAAI,SAACC,GAAD,OACpCT,EAAI,UAAckB,WACd,SAACC,GAAD,OAAWA,EAAO,OAAaV,QAKjCW,EAAoBJ,EAAWR,KAAI,SAACC,GAAD,OACrCT,EAAI,UAAckB,WACd,SAACC,GAAD,OAAWA,EAAO,OAAaV,QAKvCQ,EAAkBvB,OAClB0B,EAAkB1B,OAGlB,IAAM2B,EAAWJ,EAAkBK,KAAK,KAClCC,EAAUH,EAAkBE,KAAK,KAGjCE,EAAG,sFAAkFH,EAAlF,sBAAwGE,GAEjHE,IAAMC,IAAIF,GACLG,MAAK,SAAAC,GACF,GAAIA,EAAS5B,KAAK6B,OAAS,EAAG,CAC1B,IACMC,EADeF,EAAS5B,KAAK+B,MAAM,KACTvB,KAAI,SAACC,GAAD,OAChCT,EAAI,KAASgC,SAASvB,IAAtB,QAEJnB,EAAS,CACLS,KAAM,OACNC,KAAM8B,IAEVxC,EAAS,CACLS,KAAM,eAoB4BkC,GAAG,WAAWC,KAAM,SAGlE,cAACvB,EAAA,EAAD,CAASC,MAAM,QAAQC,UAAU,MAAjC,SACI,8BACI,cAAC,IAAD,CAAcC,QAnBL,WACrBxB,EAAS,CACLS,KAAM,UAEVT,EAAS,CACLS,KAAM,cAc2CkC,GAAG,QAAQC,KAAM,a,iCCvC/DC,MAlCf,YAAwB,IAATrD,EAAQ,EAARA,MAEX,EAA0BH,IAA1B,mBAAOU,EAAP,KAAcC,EAAd,KAEM8C,EAAe,SAACC,GACpB,IAAIxC,EAAK,YAAOR,EAAMP,IAEtBe,EAAMyC,OAAOD,EAAK,GAElB/C,EAAS,CACPS,KAAMjB,EACNkB,KAAMH,KAKV,OACI,8BACI,+BACGR,EAAMP,GAAO0B,KAAI,SAAAC,GAAI,OACpB,sBAAKlB,UAAU,OAAf,UACE,6BACE,+BAAOkB,MAET,cAAC8B,EAAA,EAAD,CAAYN,GAAG,SAASnB,QAASsB,EAAcF,KAAK,QAApD,SACI,cAAC,IAAD,CAAY5B,MAAO,CAACkC,SAAU,uBChBrCC,E,MAFKC,EAASC,cAXN,CACnBC,OAAQ,0CACRC,WAAY,iCACZC,YAAa,qDACbC,UAAW,iBACXC,cAAe,6BACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAIOC,WAAWC,MCmDtBC,MAvDf,WACE,MAAwBC,mBAAS,CAAC,UAAY,GACZ,KAAO,GACP,UAAY,KAF9C,mBAAOvD,EAAP,KAAawD,EAAb,KAIMnE,EAAQV,IAAgB,GAU9B,OATA8E,qBAAU,WACRhB,EAAMiB,KAAK,SAAQ,SAACC,GAClBH,EAAQ,CACN,UAAaG,EAAKC,MAAL,UACb,KAAQD,EAAKC,MAAL,KACR,UAAaD,EAAKC,MAAL,iBAGhB,IAED,sBAAKrE,UAAU,MAAf,UACE,wBAAQA,UAAU,aAAlB,SACE,cAAC,EAAD,MAEF,sBAAKA,UAAU,OAAf,UACE,sBAAKA,UAAU,KAAf,UACE,sBAAKA,UAAU,OAAf,UACE,4CACCS,EAAI,UAAc6B,OAAS,EACxB,cAAChD,EAAD,CAAOC,MAAQ,YAAYC,QAAWiB,EAAI,UAAcQ,KAAI,SAACC,GAAD,OAAQA,EAAKoD,UACzE,KACJ,cAAC,EAAD,CAAM/E,MAAQ,iBAGhB,sBAAKS,UAAU,MAAf,UACE,4CACCS,EAAI,UAAc6B,OAAS,EACxB,cAAChD,EAAD,CAAOC,MAAQ,YAAYC,QAAWiB,EAAI,UAAcQ,KAAI,SAACC,GAAD,OAAQA,EAAKoD,UACzE,KACJ,cAAC,EAAD,CAAM/E,MAAQ,oBAKlB,sBAAKS,UAAU,OAAf,UACCF,EAAK,OACLA,EAAK,KAASwC,OAAS,GACtB,sBAAKtC,UAAU,OAAf,UACE,uCACA,cAAC,EAAD,OAGJ,cAAC,EAAD,CAAUS,KAAQA,cC9CX8D,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBrC,MAAK,YAAkD,IAA/CsC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCPDzF,EAAe,CACxB,UAAa,GACb,UAAa,GACb,KAAQ,GACR,OAAS,qDAGAgG,EACC,YADDA,EAEA,YAFAA,EAGC,OAHDA,EAIE,QAJFA,EAKW,WALXA,EAMU,UANVA,EAOQ,QA+CNjG,EA5CC,SAACgB,EAAOkF,GACpB,OAAQA,EAAOxE,MACX,KAAKuE,EACD,OAAO,2BACAjF,GADP,IAEI,UAAakF,EAAOvE,OAE5B,KAAKsE,EACD,OAAO,2BACAjF,GADP,IAEI,UAAakF,EAAOvE,OAE5B,KAAKsE,EACD,OAAO,2BACAjF,GADP,IAEI,KAAQkF,EAAOvE,OAEvB,KAAKsE,EACD,OAAO,2BACAjF,GADP,IAEI,UAAa,GACb,UAAa,GACb,KAAQ,KAEhB,KAAKiF,EACD,OAAO,2BACAjF,GADP,IAEI,OAAU,mEAElB,KAAKiF,EACG,OAAO,2BACAjF,GADP,IAEI,OAAU,sDAEtB,KAAKiF,EACD,OAAO,2BACAjF,GADP,IAEI,OAAU,OAElB,QACI,OAAOA,ICjDnBmF,IAASC,OACP,cAAC,IAAMC,WAAP,CAAkBpG,aAAcA,EAAcD,QAASA,EAAvD,SACE,cAAC,EAAD,CAAeC,aAAcA,EAAcD,QAASA,EAApD,SACE,cAAC,EAAD,QAGJsG,SAASC,eAAe,SAM1Bd,K","file":"static/js/main.80a7818d.chunk.js","sourcesContent":["import React from 'react';\nimport \"./Header.css\";\n\nfunction Header() {\n    return (\n        <div>\n            <h1>Welcome to SafeDrug ðŸ’Š</h1>\n        </div>\n    )\n}\n\nexport default Header\n","import React, \n{createContext, useContext, useReducer}\nfrom \"react\";\n\nexport const StateContext = createContext();\n\nexport const StateProvider = ({reducer, initialState, children}) => (\n    <StateContext.Provider value={useReducer(reducer, initialState)}>\n        {children}\n    </StateContext.Provider>\n)\n\nexport const useStateValue = () => useContext(StateContext);","import React from 'react';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport TextField from '@material-ui/core/TextField';\nimport {useStateValue} from \"../StateProvider\";\n\nexport default function Input({label, options}) {\n    const inputStyle = {\n        display: \"block\",\n        background: \"rgba(0, 0, 0, 0.1)\",\n        border: \"0\",\n        color: \"rgba(0, 0, 0, 0.6)\",\n    };\n\n    const [state, dispatch] = useStateValue();\n    return (\n        <div className={label}>\n\n            <Autocomplete\n                freeSolo\n                options={options.sort()}\n                onChange={(event, value)=>{\n                    \n                    if (value !== null) {\n                        let clone = [...state[label]];\n                        clone.push(value);\n                        dispatch({\n                            type: label,\n                            data: clone\n                        });\n                    }\n                    \n                }}\n                renderInput={(params) => (\n                <TextField {...params} \n                    margin=\"normal\" \n                    variant=\"outlined\"\n                    style={inputStyle} />\n                )}\n            />\n        </div>\n    );\n}\n","import React from 'react';\nimport \"./Outputs.css\";\n\nimport {useStateValue} from \"../StateProvider\";\n\nfunction Outputs() {\n    const state = useStateValue()[0];\n\n    return (\n        <div className=\"outputs\">\n            {state[\"drug\"].map(item=>\n                <h3>\n                    <span>ðŸ’Š{item}</span>\n                </h3>                \n            )}\n        </div>\n    )\n}\n\nexport default Outputs\n","import React from 'react';\nimport {useStateValue} from \"../StateProvider\";\nimport \"./Controls.css\";\nimport axios from 'axios';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport { GiPill } from 'react-icons/gi';\nimport { GrPowerReset } from 'react-icons/gr';\n\nfunction Controls({data}) {\n    const [state, dispatch] = useStateValue();\n\n    const handleGenerateClick = () => {\n        dispatch({\n            type: \"loading\"\n        });\n        const diagnoses = state[\"diagnosis\"];\n        const procedures = state[\"procedure\"];\n\n        const diagnosis_indices = diagnoses.map((item)=>\n            data[\"diagnosis\"].findIndex(\n                (element)=>element[\"name\"] === item\n            )\n        );\n\n\n        const procedure_indices = procedures.map((item)=>\n            data[\"procedure\"].findIndex(\n                (element)=>element[\"name\"] === item\n            )\n        );\n\n\n        diagnosis_indices.sort();\n        procedure_indices.sort();\n\n\n        const diag_str = diagnosis_indices.join(\"-\");\n        const pro_str = procedure_indices.join(\"-\");\n\n\n        const url = `https://us-central1-safedrug-315515.cloudfunctions.net/prediction?diagnosis=${diag_str}&procedure=${pro_str}`;\n\n        axios.get(url)\n            .then(response => {\n                if (response.data.length > 0) {\n                    const drug_indices = response.data.split(\"-\");\n                    const drug_names = drug_indices.map((item)=>\n                        data[\"drug\"][parseInt(item)][\"name\"]\n                    );\n                    dispatch({\n                        type: \"drug\",\n                        data: drug_names\n                    });\n                    dispatch({\n                        type: \"empty\"\n                    });\n                }\n            });\n    };\n\n    const handleResetClick = () => {\n        dispatch({\n            type: \"reset\"\n        });\n        dispatch({\n            type: \"original\"\n        });\n        \n    };\n\n    return (\n        <div className = \"generate-reset\">\n            <Tooltip title=\"Get Drugs\" placement=\"top\">\n                <div>\n                    <GiPill onClick={handleGenerateClick} id=\"generate\" size={70}/>\n                </div>\n            </Tooltip>\n            <Tooltip title=\"Reset\" placement=\"top\">\n                <div>\n                    <GrPowerReset onClick={handleResetClick} id=\"reset\" size={50}/>\n                </div>\n            </Tooltip>\n        </div>\n    )\n}\n\nexport default Controls","import React from 'react';\nimport {useStateValue} from \"../StateProvider\";\nimport RemoveIcon from '@material-ui/icons/Remove';\nimport { IconButton } from '@material-ui/core';\nimport './List.scss';\n\nfunction List({label}) {\n\n    const [state, dispatch] = useStateValue();   \n\n    const handleRemove = (idx) => {\n      let clone = [...state[label]];\n      \n      clone.splice(idx, 1);\n\n      dispatch({\n        type: label,\n        data: clone\n      });\n\n    }\n\n    return (\n        <div>\n            <main>\n              {state[label].map(item => \n                <div className=\"Item\">\n                  <h4>\n                    <span>{item}</span>\n                  </h4>\n                  <IconButton id=\"remove\" onClick={handleRemove} size='small'>\n                      <RemoveIcon style={{fontSize: '15px'}}/>\n                  </IconButton>\n                </div>\n                )}\n            </main>\n        </div>\n    )\n}\n\nexport default List","import firebase from \"firebase\";\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyCoUH0LYUEn7imcznSBxXwVi5NX0kzwGbM\",\n    authDomain: \"safedrug-c12d1.firebaseapp.com\",\n    databaseURL: \"https://safedrug-c12d1-default-rtdb.firebaseio.com\",\n    projectId: \"safedrug-c12d1\",\n    storageBucket: \"safedrug-c12d1.appspot.com\",\n    messagingSenderId: \"345365845613\",\n    appId: \"1:345365845613:web:b5bb644328ce428df85164\",\n    measurementId: \"G-WV0B99DVQE\"\n  };\n\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\nconst dbRef = firebaseApp.database().ref();\nexport default dbRef;","import './App.scss';\nimport React, {useState, useEffect} from 'react';\nimport Header from \"./Header/Header\";\nimport Input from \"./Input/Input\";\nimport Outputs from \"./Outputs/Outputs\";\nimport Controls from \"./Controls/Controls\";\nimport {useStateValue} from \"./StateProvider\";\nimport List from \"./List/List\";\nimport dbRef from \"./firebase\";\n\nfunction App() {\n  const [data, setData] = useState({\"diagnosis\":[],\n                                    \"drug\":[],\n                                    \"procedure\":[],                                  \n                                    });\n  const state = useStateValue()[0];   \n  useEffect(() => {\n    dbRef.once('value',(snap)=>{\n      setData({\n        \"diagnosis\": snap.val()['diagnosis'] ,\n        \"drug\": snap.val()['drug'] ,\n        \"procedure\": snap.val()['procedure']\n      })\n    });\n  }, []);\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Header/>\n      </header>\n      <div className=\"main\">\n        <div className=\"up\">\n          <div className=\"diag\">\n            <h2>Diagnosis:</h2>\n            {data[\"diagnosis\"].length > 0\n              ? <Input label = \"diagnosis\" options = {data[\"diagnosis\"].map((item)=>item.name)}/>\n              : null}\n            <List label = \"diagnosis\"/>\n          </div>\n          \n          <div className=\"pro\">\n            <h2>Procedure:</h2>\n            {data[\"procedure\"].length > 0\n              ? <Input label = \"procedure\" options = {data[\"procedure\"].map((item)=>item.name)}/>\n              : null}\n            <List label = \"procedure\"/>\n          </div>\n          \n        </div>\n\n        <div className=\"down\">\n        {state[\"notify\"]}\n        {state[\"drug\"].length > 0 && \n          <div className=\"drug\">\n            <h2>Drug:</h2>\n            <Outputs/>\n          </div>\n        }\n        <Controls data = {data}/>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export const initialState = {\n    \"diagnosis\": [],\n    \"procedure\": [],\n    \"drug\": [],\n    \"notify\":<h3>Click to get Drugs</h3>,\n};\n\nexport const actionTypes = {\n    SET_DIAG: \"diagnosis\",\n    SET_PRO: \"procedure\",\n    SET_DRUG: \"drug\",\n    SET_RESET: \"reset\",\n    SET_NOTIF_ORIGINAL: \"original\",\n    SET_NOTIF_LOADING: \"loading\",\n    SET_NOTIF_EMPTY: \"empty\",\n};\n\nconst reducer = (state, action) => {\n    switch (action.type) {\n        case actionTypes.SET_DIAG:\n            return {\n                ...state,\n                \"diagnosis\": action.data\n            };\n        case actionTypes.SET_PRO:\n            return {\n                ...state,\n                \"procedure\": action.data\n            };\n        case actionTypes.SET_DRUG:\n            return {\n                ...state,\n                \"drug\": action.data\n            };\n        case actionTypes.SET_RESET:\n            return {\n                ...state,\n                \"diagnosis\": [],\n                \"procedure\": [],\n                \"drug\": []\n            };\n        case actionTypes.SET_NOTIF_LOADING:\n            return {\n                ...state,\n                \"notify\": <h3>Loading Drugs ... Wait for 10s </h3>\n            };\n        case actionTypes.SET_NOTIF_ORIGINAL:\n                return {\n                    ...state,\n                    \"notify\": <h3>Click to get Drugs</h3>\n                };\n        case actionTypes.SET_NOTIF_EMPTY:\n            return {\n                ...state,\n                \"notify\": null\n            };\n        default: \n            return state;\n    }\n};\n\nexport default reducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport reducer, {initialState} from \"./reducer\";\nimport {StateProvider} from \"./StateProvider\";\n\nReactDOM.render(\n  <React.StrictMode initialState={initialState} reducer={reducer}>\n    <StateProvider initialState={initialState} reducer={reducer}>\n      <App />\n    </StateProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}