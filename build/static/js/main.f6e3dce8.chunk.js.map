{"version":3,"sources":["Header/Header.js","StateProvider.js","Input/Input.js","Outputs/Outputs.js","Controls/Controls.js","List/List.js","firebase.js","App.js","reportWebVitals.js","reducer.js","index.js"],"names":["Header","StateContext","createContext","StateProvider","reducer","initialState","children","Provider","value","useReducer","useStateValue","useContext","Input","label","options","inputStyle","display","background","border","color","state","dispatch","className","Autocomplete","freeSolo","sort","onChange","event","clone","push","type","data","renderInput","params","TextField","margin","variant","style","Outputs","map","item","Controls","Tooltip","title","placement","onClick","diagnoses","procedures","diagnosis_indices","findIndex","element","procedure_indices","diag_str","join","pro_str","url","axios","get","then","response","length","drug_names","split","parseInt","id","size","List","handleRemove","idx","splice","IconButton","fontSize","dbRef","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","database","ref","App","useState","setData","useEffect","once","snap","val","name","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","actionTypes","action","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f6e3dce8.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./Header.css\";\r\n\r\nfunction Header() {\r\n    return (\r\n        <div>\r\n            <h1>Welcome to SafeDrug ðŸ’Š</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","import React, \r\n{createContext, useContext, useReducer}\r\nfrom \"react\";\r\n\r\nexport const StateContext = createContext();\r\n\r\nexport const StateProvider = ({reducer, initialState, children}) => (\r\n    <StateContext.Provider value={useReducer(reducer, initialState)}>\r\n        {children}\r\n    </StateContext.Provider>\r\n)\r\n\r\nexport const useStateValue = () => useContext(StateContext);","import React from 'react';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport {useStateValue} from \"../StateProvider\";\r\n\r\nexport default function Input({label, options}) {\r\n    const inputStyle = {\r\n        display: \"block\",\r\n        background: \"rgba(0, 0, 0, 0.1)\",\r\n        border: \"0\",\r\n        color: \"rgba(0, 0, 0, 0.6)\",\r\n    };\r\n\r\n    const [state, dispatch] = useStateValue();\r\n    return (\r\n        <div className={label}>\r\n\r\n            <Autocomplete\r\n                freeSolo\r\n                options={options.sort()}\r\n                onChange={(event, value)=>{\r\n                    \r\n                    if (value !== null) {\r\n                        let clone = [...state[label]];\r\n                        clone.push(value);\r\n                        dispatch({\r\n                            type: label,\r\n                            data: clone\r\n                        });\r\n                    }\r\n                    \r\n                }}\r\n                renderInput={(params) => (\r\n                <TextField {...params} \r\n                    margin=\"normal\" \r\n                    variant=\"outlined\"\r\n                    style={inputStyle} />\r\n                )}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport \"./Outputs.css\";\r\n\r\nimport {useStateValue} from \"../StateProvider\";\r\n\r\nfunction Outputs() {\r\n    const state = useStateValue()[0];\r\n\r\n    return (\r\n        <div className=\"outputs\">\r\n            {state[\"drug\"].map(item=>\r\n                <h3>\r\n                    <span>ðŸ’Š{item}</span>\r\n                </h3>                \r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Outputs\r\n","import React from 'react';\r\nimport {useStateValue} from \"../StateProvider\";\r\nimport \"./Controls.css\";\r\nimport axios from 'axios';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport { GiPill } from 'react-icons/gi';\r\nimport { GrPowerReset } from 'react-icons/gr';\r\n\r\nfunction Controls({data}) {\r\n    const [state, dispatch] = useStateValue();\r\n\r\n    const handleGenerateClick = () => {\r\n        dispatch({\r\n            type: \"loading\"\r\n        });\r\n        const diagnoses = state[\"diagnosis\"];\r\n        const procedures = state[\"procedure\"];\r\n\r\n        const diagnosis_indices = diagnoses.map((item)=>\r\n            data[\"diagnosis\"].findIndex(\r\n                (element)=>element[\"name\"] === item\r\n            )\r\n        );\r\n\r\n\r\n        const procedure_indices = procedures.map((item)=>\r\n            data[\"procedure\"].findIndex(\r\n                (element)=>element[\"name\"] === item\r\n            )\r\n        );\r\n\r\n\r\n        diagnosis_indices.sort();\r\n        procedure_indices.sort();\r\n\r\n\r\n        const diag_str = diagnosis_indices.join(\"-\");\r\n        const pro_str = procedure_indices.join(\"-\");\r\n\r\n\r\n        const url = `https://us-central1-safedrug-315515.cloudfunctions.net/prediction?diagnosis=${diag_str}&procedure=${pro_str}`;\r\n\r\n        axios.get(url)\r\n            .then(response => {\r\n                if (response.data.length > 0) {\r\n                    const drug_indices = response.data.split(\"-\");\r\n                    const drug_names = drug_indices.map((item)=>\r\n                        data[\"drug\"][parseInt(item)][\"name\"]\r\n                    );\r\n                    dispatch({\r\n                        type: \"drug\",\r\n                        data: drug_names\r\n                    });\r\n                    dispatch({\r\n                        type: \"empty\"\r\n                    });\r\n                }\r\n            });\r\n    };\r\n\r\n    const handleResetClick = () => {\r\n        dispatch({\r\n            type: \"reset\"\r\n        });\r\n        dispatch({\r\n            type: \"original\"\r\n        });\r\n        \r\n    };\r\n\r\n    return (\r\n        <div className = \"generate-reset\">\r\n            <Tooltip title=\"Get Drugs\" placement=\"top\">\r\n                <div>\r\n                    <GiPill onClick={handleGenerateClick} id=\"generate\" size={70}/>\r\n                </div>\r\n            </Tooltip>\r\n            <Tooltip title=\"Reset\" placement=\"top\">\r\n                <div>\r\n                    <GrPowerReset onClick={handleResetClick} id=\"reset\" size={50}/>\r\n                </div>\r\n            </Tooltip>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Controls","import React from 'react';\r\nimport {useStateValue} from \"../StateProvider\";\r\nimport RemoveIcon from '@material-ui/icons/Remove';\r\nimport { IconButton } from '@material-ui/core';\r\nimport './List.scss';\r\n\r\nfunction List({label}) {\r\n\r\n    const [state, dispatch] = useStateValue();   \r\n\r\n    const handleRemove = (idx) => {\r\n      let clone = [...state[label]];\r\n      \r\n      clone.splice(idx, 1);\r\n\r\n      dispatch({\r\n        type: label,\r\n        data: clone\r\n      });\r\n\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <main>\r\n              {state[label].map(item => \r\n                <div className=\"Item\">\r\n                  <h4>\r\n                    <span>{item}</span>\r\n                  </h4>\r\n                  <IconButton id=\"remove\" onClick={handleRemove} size='small'>\r\n                      <RemoveIcon style={{fontSize: '15px'}}/>\r\n                  </IconButton>\r\n                </div>\r\n                )}\r\n            </main>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default List","import firebase from \"firebase\";\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyCoUH0LYUEn7imcznSBxXwVi5NX0kzwGbM\",\r\n    authDomain: \"safedrug-c12d1.firebaseapp.com\",\r\n    databaseURL: \"https://safedrug-c12d1-default-rtdb.firebaseio.com\",\r\n    projectId: \"safedrug-c12d1\",\r\n    storageBucket: \"safedrug-c12d1.appspot.com\",\r\n    messagingSenderId: \"345365845613\",\r\n    appId: \"1:345365845613:web:b5bb644328ce428df85164\",\r\n    measurementId: \"G-WV0B99DVQE\"\r\n  };\r\n\r\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\r\nconst dbRef = firebaseApp.database().ref();\r\nexport default dbRef;","import './App.scss';\r\nimport React, {useState, useEffect} from 'react';\r\nimport Header from \"./Header/Header\";\r\nimport Input from \"./Input/Input\";\r\nimport Outputs from \"./Outputs/Outputs\";\r\nimport Controls from \"./Controls/Controls\";\r\nimport {useStateValue} from \"./StateProvider\";\r\nimport List from \"./List/List\";\r\nimport dbRef from \"./firebase\";\r\n\r\nfunction App() {\r\n  const [data, setData] = useState({\"diagnosis\":[],\r\n                                    \"drug\":[],\r\n                                    \"procedure\":[],                                  \r\n                                    });\r\n  const state = useStateValue()[0];   \r\n  useEffect(() => {\r\n    dbRef.once('value',(snap)=>{\r\n      setData({\r\n        \"diagnosis\": snap.val()['diagnosis'] ,\r\n        \"drug\": snap.val()['drug'] ,\r\n        \"procedure\": snap.val()['procedure']\r\n      })\r\n    });\r\n  }, []);\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <Header/>\r\n      </header>\r\n      <div className=\"main\">\r\n        <div className=\"up\">\r\n          <div className=\"diag\">\r\n            <h2>Diagnosis:</h2>\r\n            {data[\"diagnosis\"].length > 0\r\n              ? <Input label = \"diagnosis\" options = {data[\"diagnosis\"].map((item)=>item.name)}/>\r\n              : null}\r\n            <List label = \"diagnosis\"/>\r\n          </div>\r\n          \r\n          <div className=\"pro\">\r\n            <h2>Procedure:</h2>\r\n            {data[\"procedure\"].length > 0\r\n              ? <Input label = \"procedure\" options = {data[\"procedure\"].map((item)=>item.name)}/>\r\n              : null}\r\n            <List label = \"procedure\"/>\r\n          </div>\r\n          \r\n        </div>\r\n        <div className=\"down\">\r\n        {(state[\"diagnosis\"].length > 0 && state[\"procedure\"].length > 0) && \r\n          state[\"notify\"]\r\n        }\r\n        {state[\"drug\"].length > 0 && \r\n          <div className=\"drug\">\r\n            <h2>Drug:</h2>\r\n            <Outputs/>\r\n          </div>\r\n        }\r\n        {(state[\"diagnosis\"].length > 0 && state[\"procedure\"].length > 0) ? \r\n          <Controls data = {data}/>\r\n          :\r\n          <h3>Input at least one diagnosis and one procedure to get drugs</h3>\r\n        }\r\n        \r\n        \r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","export const initialState = {\r\n    \"diagnosis\": [],\r\n    \"procedure\": [],\r\n    \"drug\": [],\r\n    \"notify\":<h3>Click left button to get Drugs</h3>,\r\n};\r\n\r\nexport const actionTypes = {\r\n    SET_DIAG: \"diagnosis\",\r\n    SET_PRO: \"procedure\",\r\n    SET_DRUG: \"drug\",\r\n    SET_RESET: \"reset\",\r\n    SET_NOTIF_ORIGINAL: \"original\",\r\n    SET_NOTIF_LOADING: \"loading\",\r\n    SET_NOTIF_EMPTY: \"empty\",\r\n};\r\n\r\nconst reducer = (state, action) => {\r\n    switch (action.type) {\r\n        case actionTypes.SET_DIAG:\r\n            return {\r\n                ...state,\r\n                \"diagnosis\": action.data\r\n            };\r\n        case actionTypes.SET_PRO:\r\n            return {\r\n                ...state,\r\n                \"procedure\": action.data\r\n            };\r\n        case actionTypes.SET_DRUG:\r\n            return {\r\n                ...state,\r\n                \"drug\": action.data\r\n            };\r\n        case actionTypes.SET_RESET:\r\n            return {\r\n                ...state,\r\n                \"diagnosis\": [],\r\n                \"procedure\": [],\r\n                \"drug\": []\r\n            };\r\n        case actionTypes.SET_NOTIF_LOADING:\r\n            return {\r\n                ...state,\r\n                \"notify\": <h3>Loading Drugs ... Wait for 5-30s </h3>\r\n            };\r\n        case actionTypes.SET_NOTIF_ORIGINAL:\r\n                return {\r\n                    ...state,\r\n                    \"notify\": <h3>Click left button to get Drugs</h3>\r\n                };\r\n        case actionTypes.SET_NOTIF_EMPTY:\r\n            return {\r\n                ...state,\r\n                \"notify\": null\r\n            };\r\n        default: \r\n            return state;\r\n    }\r\n};\r\n\r\nexport default reducer;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport reducer, {initialState} from \"./reducer\";\r\nimport {StateProvider} from \"./StateProvider\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode initialState={initialState} reducer={reducer}>\r\n    <StateProvider initialState={initialState} reducer={reducer}>\r\n      <App />\r\n    </StateProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}